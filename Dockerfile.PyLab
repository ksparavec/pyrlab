ARG PYTHONBASE
FROM pyrlab-base:${PYTHONBASE}

ARG PYTHONBASE
ARG PIPPROXY
ARG PIPHOST

ENV USERLAB=${USERLAB}
ENV PORT=${PORT}
ENV RCS=${RCS}

USER ${USER}

WORKDIR ${HOMEDIR}

SHELL [ "/bin/bash", "-l", "-c" ]

COPY --chown=${USER}:${USER} requirements_* ./
COPY --chown=${USER}:${USER} repositories.yml ./

RUN <<EOT
#!/usr/bin/env bash
set -eux
export PYTHONDONTWRITEBYTECODE=1
[[ zzz${PIPPROXY} != zzz ]] && USEPROXY="-i ${PIPPROXY}/root/pypi/+simple --trusted-host ${PIPHOST}"
PYTHONMAJOR=`echo ${PYTHONBASE} | cut -d- -f1`
for package in pip Cython numpy; do
    pip install \
        --upgrade \
        --default-timeout=300 \
        --no-warn-script-location \
        --no-cache-dir \
        --no-compile \
        --user \
        ${USEPROXY} ${package}
done
for reqs in common ${PYTHONMAJOR}; do
    pip install \
        --upgrade \
        --default-timeout=300 \
        --no-warn-script-location \
        --no-cache-dir \
        --no-compile \
        --user \
        ${USEPROXY} -r requirements_${reqs}.txt
done
EOT

RUN <<EOT
#!/usr/bin/env python
import os
import yaml
import shutil
import subprocess

data = yaml.safe_load(open('repositories.yml'))
os.chdir('/tmp')
for repo in data:
    if repo['enable'] == "yes":
        print('Cloning remote repository ' + repo['name'])
        subprocess.run(['git', 'clone', repo['url']], stdout=subprocess.PIPE, universal_newlines=True)
        dir = repo['url'].split("/")[-1]
        os.chdir(dir)
        print('Running ' + repo['command'])
        subprocess.run(repo['command'].split(" "), stdout=subprocess.PIPE, universal_newlines=True)
        print('Removing ' + '/tmp/' + dir)
        shutil.rmtree('/tmp/' + dir)
EOT

COPY --chown=${USER}:${USER} --chmod=0755 jupyterlab.sh ./

ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD [[ -x /volumes/docker/${USERLAB} ]] && /volumes/docker/${USERLAB} || ${HOMEDIR}/jupyterlab.sh

